@page "/editscreeningroom/{screeningRoomId}"

@inject NavigationManager NavigationManager
@inject IGetScreeningRoomByIdUseCase GetScreeningRoomByIdUseCase
@inject IEditScreeningRoomUseCase EditScreeningRoomUseCase

<h3>Edytuj salę</h3>
@if(screeningRoom != null)
{
    <EditForm Model="screeningRoom" class="form-inline" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Nazwa sali</label>
            <InputText id="name" @bind-Value="screeningRoom.ScreeningRoomName" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="rowCount">Liczba rzędów</label>
            <InputNumber id="rowCount" @bind-Value="screeningRoom.RowCount" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="columnCount">Liczba foteli w rzędzie</label>
            <InputNumber id="columnCount" @bind-Value="screeningRoom.ColumnCount" class="form-control"></InputNumber>
        </div>

        <button type="submit" class="btn btn-primary">Zapisz</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Anuluj</button>
    </EditForm>
}

@code 
{
    [Parameter]
    public string ScreeningRoomId { get; set; }

    private ScreeningRoom screeningRoom;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        screeningRoom = new ScreeningRoom();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if(int.TryParse(this.ScreeningRoomId, out int iScreeningRoomId))
        {
            var scrRoom = GetScreeningRoomByIdUseCase.Execute(iScreeningRoomId);
            this.screeningRoom = new ScreeningRoom
                {
                    ScreeningRoomID = scrRoom.ScreeningRoomID,
                    ScreeningRoomName = scrRoom.ScreeningRoomName,
                    ColumnCount = scrRoom.ColumnCount,
                    RowCount = scrRoom.RowCount
                };
        }
    }

    private void OnValidSubmit()
    {
        EditScreeningRoomUseCase.Execute(this.screeningRoom);
        NavigationManager.NavigateTo("/screeningrooms");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/screeningrooms");
    }
}
