@page "/showing/{showingId}"

@inject IViewScreeningRoomsUseCase ViewScreeningRoomsUseCase
@inject IViewMoviesUseCase ViewMoviesUseCase
@inject IGetShowingByIdUseCase GetShowingByIdUseCase
@inject IGetMovieByIdUseCase GetMovieByIdUseCase
@inject IGetScreeningRoomByIdUseCase GetScreeningRoomByIdUseCase
@inject IGetReservationsByShowingIdUseCase GetReservationsByShowingIdUseCase
@inject IGetTicketsByMailUseCase GetTicketsByMailUseCase
@inject IConfirmReservationUseCase ConfirmReservationUseCase
@inject IAddReservationUseCase AddReservationUseCase
@inject IDeleteReservationByPositionUseCase DeleteReservationByPositionUseCase
@inject IAddTicketUseCase AddTicketUseCase
@inject IFinalizeTicketUseCase FinalizeTicketUseCase
@inject IDeleteTicketByIdsUseCase DeleteTicketByIdsUseCase
@inject IDeleteExpiredReservationsByShowingIdUseCase DeleteExpiredReservationsByShowingIdUseCase
@inject NavigationManager NavManager

<div class="content">
    @if(showing != null)
    {
        <div class="row">
            <div class="col-5" style="vertical-align: bottom;">
                <h3>Seans @showing.ShowingId</h3>
                <p>
                    Sala: @screeningRoom.ScreeningRoomName
                    <br />
                    Film: @movie.Title (@movie.Year)
                    <br />
                    Data: @showing.Date.ToString("HH:mm") @showing.Date.ToString("dd/MM/yyyy")
                    <br />
                    Zaznaczone miejsca: @markedSeats.Count / 10
                    <br />
                    <p style="color:lightgoldenrodyellow;">
                        @if (markedSeats.Count > 0)
                        {
                            @foreach (Reservation r in markedSeats)
                            {
                                int c = r.ColumnNumber;
                                char rLetter = (char)(r.RowNumber + 64);
                                char whiteSpace = ' ';

                                @rLetter@c@whiteSpace
                            }
                        }
                        else
                        {
                            <br />
                        }
                    </p>             
                </p>
            </div>
            <div class="col" style="text-align: right;">
                <img src="@movie.ImageUrl" alt="@movie.Title" height=150>
            </div>
            <divd style="text-align:center; font-size:large">
                @if (paymentSuccess)
                    {
                        <dl>Zapłacono!</dl>
                        <dl>Przekierowuję...</dl>
                    }
                    else if (processingPayment)
                    {
                        <dl>Przetwarzanie płatności...</dl>
                    }
                    else if (archivedShowing)
                    {
                        <dl>Nie można już kupować biletów na ten seans</dl>
                    }
                    else
                    {
                        <dl>Wybierz miejsca</dl>
                    }
            </divd>
        </div>

            @if (!paymentSuccess) // display screening room
            {
                <table class="screeningRoomTable">
                    <tbody>
                        @for (var i = 1; i <= @screeningRoom.RowCount; i++)
                        {
                            var r = i;
                            char rLetter = (char)(i + 64);
                            <tr class="screeningRoomRow">
                                @for (var j = 1; j <= @screeningRoom.ColumnCount; j++)
                                {
                                    var c = j;
                                    @if (showingReservations.Any(x => x.RowNumber == i && x.ColumnNumber == j && x.ReservationExpirationDate > DateTime.Now.AddYears(1)))
                                    {
                                        <td class="screeningRoomSeat"><div class="seat_taken"> <dl>@rLetter@c</dl> </div></td>
                                    }
                                    else if (showingReservations.Any(x => x.RowNumber == i && x.ColumnNumber == j))
                                    {
                                        <td class="screeningRoomSeat"><div class="seat_reserved"> <dl>@rLetter@c</dl> </div></td>
                                    }
                                    else if (markedSeats.Any(x => x.RowNumber == i && x.ColumnNumber == j))
                                    {
                                        <td class="screeningRoomSeat" @onclick="() => ToggleSeatMark(r, c)"><div class="seat_marked"> <dl>@rLetter@c</dl> </div></td>
                                    }
                                    else
                                    {
                                        <td class="screeningRoomSeat" @onclick="() => ToggleSeatMark(r, c)"><div class="seat"> <dl>@rLetter@c</dl> </div></td>
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
                <br />

                <div style="text-align:center;">
                    <button type="button" class="btn" style="width:400px" @onclick="lockSeatsAndProcessPayment" disabled="@cannotSubmit">Potwierdź maila i zapłać</button>
                    <br/>
                    <input @oninput="checkIfPurchaseButtonEnabled" style="text-transform:lowercase;width:400px;text-align:center"/> 
                    <br />
                </div>
        }
        else
        {
            openTicket();
        }


    }
    else
    {
        <h6>Przepraszamy, podany seans nie istnieje.</h6>
    }

</div>

@code 
{
    [Parameter]
    public string ShowingId { get; set; }

    private Showing showing;
    private ScreeningRoom screeningRoom;
    private Movie movie;
    private List<Reservation> showingReservations = new(); //database state of reservations
    private List<Reservation> markedSeats = new(); //seats marked by the user 
    private bool cannotSubmit = true; // bound to submit button
    private bool validEmail = false; // whether or not email can be classified as valid
    private bool processingPayment = false; // payment is being processed (refreshing page will cancel purchase)
    private bool paymentSuccess = false; // payment has went through
    private bool archivedShowing = false; // showing is archived - cannot buy or mark tickets
    private string customerEmailString = ""; // bound to textbox
    private EmailAddressAttribute customerEmailAttribute = new EmailAddressAttribute(); // email attribute for validifying email string
    private Ticket ticket = new Ticket(); // ticket for this browser page
    private string ticketLink = ""; // ticket link for user

    private async void openTicket() // delay and open a new page
    {
        await Task.Delay(3000);
        NavManager.NavigateTo(ticketLink);
    }

    private async void lockSeatsAndProcessPayment() // check seats, lock seats, process payment, confirm reservations and send mail
    {
        // add cool stuff to ticket
        ticket.ClientMail = customerEmailString;
        ticket.PurchaseDate = System.DateTime.Now;
        AddTicketUseCase.Execute(ticket);

        // populate reservation list for the showing with the up to date one
        PopulateReservations();

        // temporary list of locked seats 
        List<Reservation> lockedSeats = new();

        foreach (Reservation r in markedSeats)
        {
            // check if seats are not taken
            if (showingReservations.Any(x => x.ShowingId == r.ShowingId &&
                                x.RowNumber == r.RowNumber &&
                                x.ColumnNumber == r.ColumnNumber))
            {
                markedSeats.Clear(); // unmark seats
                                     // todo: message for user
                foreach (Reservation lr in lockedSeats) //undo reservations
                {
                    DeleteReservationByPositionUseCase.Execute(lr.ShowingId, lr.RowNumber, lr.ColumnNumber);
                }
                lockedSeats.Clear();

                // remove cool ticket from db
                DeleteTicketByIdsUseCase.Execute(ticket.ClientMail, ticket.TicketId);

                return; // no payment, end of function, RETURN
            }

            else // make a temporary reservation
            {
                r.ClientMail = customerEmailString;
                r.TicketId = ticket.TicketId;
                AddReservationUseCase.Execute(r);
                lockedSeats.Add(r);
            }
        }

        processingPayment = true;
        // TODO: visualize fake payment processing
        await Task.Delay(3000);

        // payment processed - confirm reservations
        // this method will find reservation matching r in db and update that reservation
        foreach (Reservation r in markedSeats) ConfirmReservationUseCase.Execute(r);

        // create ticket
        FinalizeTicketUseCase.Execute(ticket, markedSeats, showing, movie);

        ticketLink = "/ticket/" + ticket.QRString;

        paymentSuccess = true;
        processingPayment = false;

        checkIfPurchaseButtonEnabled(null);

        StateHasChanged(); // make sure to update UI
    }


    private void checkIfPurchaseButtonEnabled(ChangeEventArgs args)
    {
        if (args != null) customerEmailString = args.Value.ToString().Trim();
        validEmail = customerEmailAttribute.IsValid(customerEmailString);

        if (validEmail && markedSeats.Count > 0 && !processingPayment && !paymentSuccess && !archivedShowing) cannotSubmit = false;
        else cannotSubmit = true;
    }

    private void ToggleSeatMark(int rowNumber, int columnNumber) // toggle seats between gray and green :)
    {
        Reservation? clickedSeat = markedSeats.FirstOrDefault(x => x.RowNumber == rowNumber && x.ColumnNumber == columnNumber);

        if (clickedSeat != null) // the seat should be unmarked because it was selected
        {
            markedSeats.Remove(clickedSeat);
        }
        else if (markedSeats.Count < 10 && !archivedShowing) // the seat wasn't selected so it should be marked if max count not reached
        {
            // this is not a real reservation in db - just a temporary one
            Reservation userMarkedSeat = new Reservation()
            {
                ShowingId = showing.ShowingId,
                RowNumber = rowNumber,
                ColumnNumber = columnNumber
            };
            markedSeats.Add(userMarkedSeat);
        }

        checkIfPurchaseButtonEnabled(null);
    }

    private void PopulateReservations() // populate local reservation variable with db information
    {
        DeleteExpiredReservationsByShowingIdUseCase.Execute(showing.ShowingId);
        var res = GetReservationsByShowingIdUseCase.Execute(showing.ShowingId);
        showingReservations.Clear();

        foreach (Reservation r in res)
        {
            showingReservations.Add(r);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //showing = new Showing();

    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if(int.TryParse(this.ShowingId, out int iShowingId)) // get int from string
        {
            var show = GetShowingByIdUseCase.Execute(iShowingId); // find show
            if(show != null) // get data
            {
                this.showing = new Showing 
                {
                    ShowingId = show.ShowingId,
                    ScreeningRoomId = show.ScreeningRoomId,
                    MovieId = show.MovieId,
                    Date = show.Date,
                    TicketPrice = show.TicketPrice
                };
                var mov = GetMovieByIdUseCase.Execute(showing.MovieId);
                this.movie = new Movie
                {
                    MovieId = mov.MovieId,
                    Title = mov.Title,
                    Description = mov.Description,
                    Year = mov.Year,
                    Length = mov.Length,
                    AgeRestriction = mov.AgeRestriction,
                    ImageUrl = mov.ImageUrl
                };
                var scrRoom = GetScreeningRoomByIdUseCase.Execute(showing.ScreeningRoomId);
                this.screeningRoom = new ScreeningRoom
                {
                    ScreeningRoomId = scrRoom.ScreeningRoomId,
                    ScreeningRoomName = scrRoom.ScreeningRoomName,
                    ColumnCount = scrRoom.ColumnCount,
                    RowCount = scrRoom.RowCount
                };

                // if showing is archived, you cannot buy tickets or mark seats
                if (showing.Date < DateTime.Now) archivedShowing = true;

                // populate reservation list for the showing
                PopulateReservations();
            }
            
        }
    }

}
